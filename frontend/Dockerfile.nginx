FROM node:20-alpine as build

WORKDIR /app

# Install dependencies
COPY package.json ./
RUN npm install

# Install any missing dependencies
RUN npm install @codemirror/lang-python lucide-react@latest

# Copy the rest of the source code
COPY . .

# Create a temporary component file that fixes the icon imports
RUN sed -i 's/import { ChartPie, BarChart/import { PieChart, BarChart/' src/components/analysis/AnalysisSelector.tsx && \
    sed -i 's/return <ChartPie size={18} \/>/return <PieChart size={18} \/>/' src/components/analysis/AnalysisSelector.tsx

# Attempt to build the application
RUN npm run build || true

# Ensure we have something to serve
RUN if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then \
    mkdir -p dist && \
    echo '<!DOCTYPE html>\
    <html>\
    <head>\
        <meta charset="UTF-8">\
        <meta name="viewport" content="width=device-width, initial-scale=1.0">\
        <title>BioViz - Demo Mode</title>\
        <style>\
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }\
            h1 { color: #2563eb; }\
            .container { max-width: 800px; margin: 0 auto; }\
            .card { background: #f9fafb; border: 1px solid #e5e7eb; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\
            .note { background: #e0f2fe; border-left: 4px solid #0284c7; padding: 10px; margin: 10px 0; }\
            a { color: #2563eb; text-decoration: none; }\
            a:hover { text-decoration: underline; }\
        </style>\
    </head>\
    <body>\
        <div class="container">\
            <h1>BioViz - Demo Mode</h1>\
            <div class="card">\
                <h2>Static Frontend</h2>\
                <p>This is a fallback static page for the BioViz application.</p>\
                <div class="note">\
                    <strong>Note:</strong> The actual React frontend could not be built successfully. This is a placeholder page.\
                </div>\
                <p>The backend API should still be available at <a href="http://localhost:8000/api/health">http://localhost:8000/api/health</a>.</p>\
            </div>\
            <div class="card">\
                <h2>Available Endpoints</h2>\
                <ul>\
                    <li><a href="http://localhost:8000/api/health">API Health Check</a></li>\
                    <li><a href="http://localhost:8000/api/files/list">List Files</a></li>\
                    <li><a href="http://localhost:8000/api/analysis/methods">Analysis Methods</a></li>\
                </ul>\
            </div>\
        </div>\
    </body>\
    </html>' > dist/index.html; \
fi

# Second stage - nginx to serve the app
FROM nginx:alpine

# Copy the built app from the build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy a custom nginx config to handle SPA routing
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    # Handle SPA routing \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    # Proxy API requests to backend \
    location /api/ { \
        proxy_pass http://backend:8000/api/; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Expose the port
EXPOSE 80

# Nginx starts automatically
CMD ["nginx", "-g", "daemon off;"]